{"version":3,"sources":["component/nav/nav.jsx","component/nav/index.jsx","App.js","serviceWorker.js","index.js"],"names":["NavElement","_this$props","this","props","link","txt","react_default","a","createElement","react_router_dom","to","isActive","match","isExact","activeClassName","className","React","Component","Nav","id","map","item","key","nav_NavElement","App","nav","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAMqBA,mLAEjB,IADOC,EAWHC,KAAKC,MAHPC,EARKH,EAQLG,KACAC,EATKJ,EASLI,IAIF,OAEEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,GAAIN,EAAMO,SAdA,SAACC,GACpB,SAAIA,IAASA,EAAMC,UAawBC,gBAAgB,SAASC,UAAU,YAC5ET,EAAAC,EAAAC,cAAA,SACGH,WAlB6BW,IAAMC,WCqF/BC,gMArCX,OACEZ,EAAAC,EAAAC,cAAA,OAAKW,GAAG,WACNb,EAAAC,EAAAC,cAAA,OAAKO,UAAU,mCAEbT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,oBAEbT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,aAAaI,GAAG,aArDvB,CACd,CACEA,GAAI,EACJd,IAAK,8FACLD,KAAM,KAER,CACEe,GAAI,EACJd,IAAK,iCACLD,KAAM,SAER,CACEe,GAAI,EACJd,IAAK,mDACLD,KAAM,WAER,CACEe,GAAI,EACJd,IAAK,mDACLD,KAAM,MAER,CACEe,GAAI,EACJd,IAAK,gGACLD,KAAM,aAER,CACEe,GAAI,EACJd,IAAK,yIACLD,KAAM,YAER,CACEe,GAAI,EACJd,IAAK,8FACLD,KAAM,YAER,CACEe,GAAI,EACJd,IAAK,wHACLD,KAAM,SAER,CACEe,GAAI,EACJd,IAAK,kFACLD,KAAM,YAWSgB,IAAI,SAAAC,GAAI,OACff,EAAAC,EAAAC,cAAA,QAAMO,UAAU,WAAWO,IAAKD,EAAKF,GAAIA,GAAG,aAC1Cb,EAAAC,EAAAC,cAACe,EAAD,CAAYlB,IAAKgB,EAAKhB,IAAKD,KAAMiB,EAAKjB,qBA3DtCa,cCeHO,MAXf,WACE,OACElB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAACiB,EAAD,SCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjB,MACvB,2DCZNkB,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b117e885.chunk.js","sourcesContent":["\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\n// import './style.css';\n\nexport default class NavElement extends React.Component {\n  render() {\n    const handleActive = (match) => {\n      if (match && match.isExact) {\n        return true;\n      }\n      return false;\n    };\n    const {\n      link,\n      txt,\n\n    } = this.props;\n\n    return (\n\n      <NavLink to={link} isActive={handleActive} activeClassName=\"active\" className=\"nav-link\">\n        <a>\n          {txt}\n        </a>\n      </NavLink>\n\n\n    );\n  }\n}\n\nNavElement.propTypes = {\n  txt: PropTypes.string.isRequired,\n  link: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport NavElement from './nav';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style.css';\n\nclass Nav extends Component {\n  render() {\n    const urlList = [\n      {\n        id: 1,\n        txt: 'الاذاعة الدراسية',\n        link: '/',\n      },\n      {\n        id: 2,\n        txt: 'الخطط',\n        link: '/plan',\n      },\n      {\n        id: 3,\n        txt: 'التقارير',\n        link: '/report',\n      },\n      {\n        id: 4,\n        txt: 'التعاميم',\n        link: '/c',\n      },\n      {\n        id: 5,\n        txt: 'صادر و وارد النشاط',\n        link: '/exersice',\n      },\n      {\n        id: 6,\n        txt: 'منجزات المشاريع الوزارية',\n        link: '/project',\n      },\n      {\n        id: 7,\n        txt: 'الدعاية والاعلان',\n        link: '/contact',\n      },\n      {\n        id: 8,\n        txt: 'ملف انجاز دائرة النشاط',\n        link: '/file',\n      },\n      {\n        id: 9,\n        txt: 'ميزانية النشاط',\n        link: '/pudjet',\n      },\n    ];\n    return (\n      <div id=\"wrapper\">\n        <nav className=\"navbar bg-light navbar-default \">\n\n          <div className=\"sidebar-collapse\">\n\n            <div className=\"navbar-nav\" id=\"side-menu\">\n\n              {urlList.map(item => (\n                <span className=\"nav-item\" key={item.id} id=\"side-menu\">\n                  <NavElement txt={item.txt} link={item.link} />\n                </span>\n              ))}\n\n            </div>\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\n\n\n{ /* <nav class=\"navbar bg-light\">\n  <ul class=\"navbar-nav\">\n    <li class=\"nav-item\">\n      <a class=\"nav-link\" href=\"#\">Link 1</a>\n    </li>\n    <li class=\"nav-item\">\n      <a class=\"nav-link\" href=\"#\">Link 2</a>\n    </li>\n    <li class=\"nav-item\">\n      <a class=\"nav-link\" href=\"#\">Link 3</a>\n    </li>\n  </ul>\n</nav> */ }\n\nexport default Nav;\n","\n\nimport './App.css';\nimport React, { Component } from 'react';\nimport {\n  BrowserRouter, Route, Switch, Redirect,\n} from 'react-router-dom';\nimport SideNavPage from './component/nav/index';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <SideNavPage />\n\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}